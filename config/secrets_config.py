"""ÏïîÌò∏ ÏÑ§Ï†ï Í¥ÄÎ¶¨"""
from typing import Dict, Optional, List
import os

# API ÌÇ§ ÏÑ§Ï†ï Íµ¨Ï°∞
API_KEY_STRUCTURE = {
    'google_gemini': {
        'env_var': 'GOOGLE_GEMINI_API_KEY',
        'secrets_key': 'google_gemini_key',
        'validation_prefix': 'AIza',
        'required': True
    },
    'xai_grok': {
        'env_var': 'XAI_GROK_API_KEY',
        'secrets_key': 'xai_grok_key',
        'validation_prefix': 'xai-',
        'required': False
    },
    'groq': {
        'env_var': 'GROQ_API_KEY',
        'secrets_key': 'groq_key',
        'validation_prefix': 'gsk_',
        'required': False
    },
    'deepseek': {
        'env_var': 'DEEPSEEK_API_KEY',
        'secrets_key': 'deepseek_key',
        'validation_prefix': 'sk-',
        'required': False
    },
    'sambanova': {
        'env_var': 'SAMBANOVA_API_KEY',
        'secrets_key': 'sambanova_key',
        'validation_prefix': None,
        'required': False
    },
    'huggingface': {
        'env_var': 'HUGGINGFACE_TOKEN',
        'secrets_key': 'huggingface_token',
        'validation_prefix': 'hf_',
        'required': False
    }
}

# Google Í¥ÄÎ†® ÏÑ§Ï†ï
GOOGLE_CONFIG = {
    'sheets_url': {
        'env_var': 'GOOGLE_SHEETS_URL',
        'secrets_key': 'google_sheets_url',
        'required': True,
        'validation': lambda x: x.startswith('https://docs.google.com/spreadsheets/')
    },
    'service_account': {
        'env_var': 'GOOGLE_SERVICE_ACCOUNT_JSON',
        'secrets_key': 'google_service_account',
        'required': False,  # Í∞úÏù∏ Í≥ÑÏ†ï ÏÇ¨Ïö© Ïãú Î∂àÌïÑÏöî
        'is_json': True
    },
    'oauth_client': {
        'env_var': 'GOOGLE_OAUTH_CLIENT_JSON',
        'secrets_key': 'google_oauth_client',
        'required': False,
        'is_json': True
    }
}

# ÏïîÌò∏ ÏûÖÎ†• Ïö∞ÏÑ†ÏàúÏúÑ
SECRET_PRIORITY = [
    'session_state',     # 1ÏàúÏúÑ: Ïï± ÎÇ¥ ÏûÖÎ†•
    'streamlit_secrets', # 2ÏàúÏúÑ: Streamlit Secrets
    'environment',       # 3ÏàúÏúÑ: ÌôòÍ≤Ω Î≥ÄÏàò
    'default'           # 4ÏàúÏúÑ: Í∏∞Î≥∏Í∞í (Î¨¥Î£å API)
]

# ÏïîÌò∏ Í≤ÄÏ¶ù Í∑úÏπô
VALIDATION_RULES = {
    'api_key_min_length': 20,
    'api_key_max_length': 200,
    'google_sheets_url_pattern': r'https://docs\.google\.com/spreadsheets/d/[\w-]+',
    'allow_empty_optional': True
}

# Î≥¥Ïïà Î©îÏãúÏßÄ
SECURITY_MESSAGES = {
    'api_key_not_found': "üîë API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.",
    'api_key_invalid': "‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ API ÌÇ§ÏûÖÎãàÎã§.",
    'api_key_saved': "‚úÖ API ÌÇ§Í∞Ä ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.",
    'google_auth_required': "üîê Google Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.",
    'security_warning': "‚ö†Ô∏è API ÌÇ§Îäî ÏïàÏ†ÑÌïòÍ≤å Î≥¥Í¥ÄÌïòÏÑ∏Ïöî."
}

# ÏòàÏãú secrets.toml ÎÇ¥Ïö©
SECRETS_TOML_TEMPLATE = """
# Streamlit Secrets ÏÑ§Ï†ï ÌååÏùº
# Ïù¥ ÌååÏùºÏùÄ .gitignoreÏóê Ï∂îÍ∞ÄÎêòÏñ¥Ïïº Ìï©ÎãàÎã§!

# ÌïÑÏàò API ÌÇ§
google_gemini_key = "YOUR_GEMINI_API_KEY_HERE"

# ÏÑ†ÌÉùÏ†Å API ÌÇ§ (ÏÇ¨Ïö©ÌïòÎ†§Îäî Í≤ÉÎßå ÏûÖÎ†•)
# xai_grok_key = "YOUR_XAI_API_KEY_HERE"
# groq_key = "YOUR_GROQ_API_KEY_HERE"
# deepseek_key = "YOUR_DEEPSEEK_API_KEY_HERE"
# sambanova_key = "YOUR_SAMBANOVA_API_KEY_HERE"
# huggingface_token = "YOUR_HF_TOKEN_HERE"

# Google Sheets URL (ÌïÑÏàò)
google_sheets_url = "https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID/edit"

# Google ÏÑúÎπÑÏä§ Í≥ÑÏ†ï (ÏÑ†ÌÉùÏÇ¨Ìï≠)
# [google_service_account]
# type = "service_account"
# project_id = "your-project-id"
# private_key_id = "your-private-key-id"
# private_key = "-----BEGIN PRIVATE KEY-----\\nYOUR_PRIVATE_KEY\\n-----END PRIVATE KEY-----\\n"
# client_email = "your-service-account@your-project.iam.gserviceaccount.com"
# client_id = "your-client-id"
# auth_uri = "https://accounts.google.com/o/oauth2/auth"
# token_uri = "https://oauth2.googleapis.com/token"
# auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
# client_x509_cert_url = "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"
"""

def get_secrets_template() -> str:
    """secrets.toml ÌÖúÌîåÎ¶ø Î∞òÌôò"""
    return SECRETS_TOML_TEMPLATE

def validate_api_key(service: str, key: str) -> bool:
    """API ÌÇ§ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù"""
    if not key:
        return False
        
    # Í∏∏Ïù¥ Í≤ÄÏ¶ù
    if len(key) < VALIDATION_RULES['api_key_min_length'] or \
       len(key) > VALIDATION_RULES['api_key_max_length']:
        return False
    
    # ÏÑúÎπÑÏä§Î≥Ñ prefix Í≤ÄÏ¶ù
    if service in API_KEY_STRUCTURE:
        prefix = API_KEY_STRUCTURE[service].get('validation_prefix')
        if prefix and not key.startswith(prefix):
            return False
    
    return True
